#! /usr/bin/env ruby

require 'rubygems'
require 'google_calendar'
require 'ruby_spark'
require 'active_support/all'

# Array of Google Calendar Names to check
CALENDARS = ['alexforey.com_pkbcsa4uk7jtog8tkj65hndpn8@group.calendar.google.com']#, 'alexforey.com_g0l2pjg9tbevhr066glf4ub6mc@group.calendar.google.com', 'alexforey.com_d51bdglmg2o9t0nk86ce8vcqik@group.calendar.google.com', 'ki1vv5ieoeljjtvh7ihumje7go@group.calendar.google.com', 'alexforey.com_9rcvmgk971lv19biuqku4bla98@group.calendar.google.com']

# Create a calendar object from a given name
def calendar(name)
  Google::Calendar.new(:client_id => ENV['CLIENT_ID'],
                        :client_secret => ENV['CLIENT_SECRET'],
                        :redirect_url => "urn:ietf:wg:oauth:2.0:oob",
                        :calendar => name,
                        :refresh_token => ENV['REFRESH_TOKEN'])
end

# Find out which events are happening right now
def events_now

  # Open empty array
  events = []

  # Loop over all the calendars
  CALENDARS.each do |name|

    # Get events occuring right now
    cal_events = calendar(name).find_events_in_range(Time.now, Time.now + 60)

    # Is there more than one event right now?
    if cal_events.kind_of?(Array)

      # Yes, so loop over each one and add it to the array
      cal_events.each do |e|
        events << {event: e, cal: name} unless e.nil?
      end

    else

      # No, so just add the one
      events << {event: cal_events, cal: name} unless cal_events.nil?

    end

  end

  # Return the final list
  return events

end

##### Main Script #####

# Get the events
events = events_now

# Are there more than one going on at the same time?
if events.length > 1

  # Yes, so pick one depending on the time
  if Time.now.min.odd?
    event = events[0]
  else
    event = events[1]
  end

elsif events.length == 1

  # No, just one, so pick that
  event = events.first

end

# Did we end up with an event?
if event
  # Yes, so build the payload with "|" between each part
  payload = "Alex is at:|#{event[:event].title}|#{event[:event].where}|(#{event[:cal]} Calendar)"
else
  # No, so say we're not busy
  payload = "Alex is currently| | Not busy| "
end

# Initalise the core
core = RubySpark::Core.new(ENV['SPARK_ID'], ENV['SPARK_TOKEN'])

# Send the text to the core
core.function("update", payload)

# Figure out whether the backlight should be on or off
now = Time.now.in_time_zone("London")

# Compare them
if now.hour >= 22 or now.hour <= 7

  # Turn it off at night
  core.function("backlight", "off")

else

  # Turn it on during the day
  core.function("backlight", "on")

end
